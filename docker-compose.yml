version: '3.8'
services:
  sqlserver:
    build: .
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "YourStrong!Password"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
    volumes:
      - sql_data:/var/opt/mssql
      - ./scripts:/scripts
    networks:
      - monitoring
    user: root

  contact-producer-microservice:
    image: mauropy01/tc-fiap-producers-contacts:latest
    container_name: contact-producer-microservice
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - rabbitmq
    networks:
      - monitoring
    
  create-contact-consumer-microservice:
    image: caiofabiogomes/tc-fiap-create-contact-consumer:latest
    container_name: create-contact-consumer-microservice
    ports:
      - "8081:8081"
    env_file:
      - .env
    depends_on:
      - rabbitmq
    networks:
      - monitoring
  
  update-contact-consumer-microservice:
    image: caiofabiogomes/tc-fiap-consumer-update:latest
    container_name: update-contact-consumer-microservice
    ports:
      - "8082:8082"
    env_file:
      - .env
    depends_on:
      - rabbitmq
    networks:
      - monitoring

  delete-contact-consumer-microservice:
    image: caiofabiogomes/tc-fiap-delete-consumer:latest
    container_name: delete-contact-consumer-microservice
    ports:
      - "8083:8083"
    env_file:
      - .env
    depends_on:
      - rabbitmq
    networks:
      - monitoring
  consulta-contact-microservice:
    image: caiofabiogomes/tc-fiap-az-get-contacts:latest
    container_name: consulta-contact-microservice
    ports:
      - "7071:80"
    env_file:
      - .env
    networks:
      - monitoring
  


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring

  rabbitmq:
    image: masstransit/rabbitmq
    container_name: rabbitmq
    hostname: rabbitmq
    networks:
      - monitoring
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-database:
    image:  postgres:11.16
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - monitoring

  kong-migrations:
    image: kong:3.8
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    restart: on-failure
    networks:
      - monitoring

  kong:
    image: kong:3.8
    container_name: kong
    restart: always
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong.yml:/etc/kong/kong.yml
    command: >
      /bin/sh -c "
        kong config db_import /etc/kong/kong.yml &&
        kong start
      "
    networks:
      - monitoring
volumes:
  sql_data:
  kong_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge
